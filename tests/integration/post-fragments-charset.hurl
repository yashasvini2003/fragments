# post-fragments-charset.hurl
# Authenticated POST to /v1/fragments with Content-Type that includes charset
POST http://localhost:8080/v1/fragments
# We're sending a plain text fragment with charset utf-8
Content-Type: text/plain; charset=utf-8
# Include HTTP Basic Auth credentials
[BasicAuth]
user1@email.com:password1
# Body of the request goes in ```...``` when it's a string
`This is a fragment with charset utf-8!`

# 1. We expect to get back an HTTP 201 Created
HTTP/1.1 201
# We have various assertions about the response that we want to check
[Asserts]
# The Location header should look like what we expect (including the fragment id)
header "Location" matches "^http:\/\/localhost:8080\/v1\/fragments\/[A-Za-z0-9_-]+$"
jsonpath "$.status" == "ok"
# Our fragment ids use UUIDs, see https://ihateregex.io/expr/uuid/
jsonpath "$.fragment.id" matches "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
# Our ownerId hash is a hex encoded string
jsonpath "$.fragment.ownerId" matches "^[0-9a-fA-F]+$"
# Basic check for the presence of created and updated date strings.
# You could also write a regex for this and use matches
jsonpath "$.fragment.created" isString
jsonpath "$.fragment.updated" isString
# The fragment type should be "text/plain; charset=utf-8"
jsonpath "$.fragment.type" == "text/plain; charset=utf-8"
# 36 is the length of our fragment data: 'This is a fragment with charset utf-8!'
jsonpath "$.fragment.size" == 38
# Capture the Location URL into a variable named `url`
[Captures]
url: header "Location"

# 2. Try to GET the fragment we just posted by its URL
GET {{url}}
[BasicAuth]
user1@email.com:password1

HTTP/1.1 200
Content-Length: 38
Content-Type: text/plain; charset=utf-8
[Asserts]
# The next line matches header for just text/plain with charset=utf-8.
header "Content-Type" matches "^text/plain; charset=utf-8$"
body == "This is a fragment with charset utf-8!"
